Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.196 Build 20170411

Compiler options: -I. -I../../common -O3 -std=c++11 -xHost -qopt-report=5 -Wunknown-pragmas -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/26=3.8%] nbody3.cpp(322,1)
  -> EXTERN: (341,12) strcmp(const char *, const char *)
  -> EXTERN: (341,41) strcmp(const char *, const char *)
  -> INLINE: (343,10) help(const char *) (isz = 36) (sz = 41)
    -> EXTERN: (162,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (163,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (164,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (165,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (166,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (167,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (168,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (346,16) strcmp(const char *, const char *)
  -> EXTERN: (346,55) strcmp(const char *, const char *)
  -> INLINE: (348,10) help(const char *) (isz = 36) (sz = 41)
    -> EXTERN: (162,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (163,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (164,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (165,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (166,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (167,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (168,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (348,10) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (350,18) isdigit(int) (isz = 7) (sz = 14)
    -> EXTERN: /usr/include/ctype.h:(186,1) __ctype_b_loc()
  -> EXTERN: (351,15) fprintf(FILE *, const char *, ...)
  -> INLINE: (351,89) help(const char *) (isz = 36) (sz = 41)
    -> EXTERN: (162,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (163,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (164,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (165,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (166,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (167,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (168,4) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (352,14) atoi(const char *) (isz = 7) (sz = 14)
    -> EXTERN: /usr/include/stdlib.h:(280,16) strtol(const char *, char **, int)
  -> EXTERN: (354,16) strcmp(const char *, const char *)
  -> EXTERN: (354,51) strcmp(const char *, const char *)
  -> INLINE: (356,10) help(const char *) (isz = 36) (sz = 41)
    -> EXTERN: (162,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (163,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (164,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (165,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (166,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (167,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (168,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (356,10) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (358,18) isdigit(int) (isz = 7) (sz = 14)
    -> EXTERN: /usr/include/ctype.h:(186,1) __ctype_b_loc()
  -> EXTERN: (359,15) fprintf(FILE *, const char *, ...)
  -> INLINE: (359,86) help(const char *) (isz = 36) (sz = 41)
    -> EXTERN: (162,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (163,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (164,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (165,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (166,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (167,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (168,4) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (360,22) atoi(const char *) (isz = 7) (sz = 14)
    -> EXTERN: /usr/include/stdlib.h:(280,16) strtol(const char *, char **, int)
  -> EXTERN: (362,16) strcmp(const char *, const char *)
  -> EXTERN: (362,53) strcmp(const char *, const char *)
  -> INLINE: (364,10) help(const char *) (isz = 36) (sz = 41)
    -> EXTERN: (162,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (163,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (164,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (165,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (166,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (167,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (168,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (364,10) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (366,18) isdigit(int) (isz = 7) (sz = 14)
    -> EXTERN: /usr/include/ctype.h:(186,1) __ctype_b_loc()
  -> EXTERN: (367,15) fprintf(FILE *, const char *, ...)
  -> INLINE: (367,88) help(const char *) (isz = 36) (sz = 41)
    -> EXTERN: (162,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (163,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (164,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (165,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (166,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (167,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (168,4) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (368,15) atof(const char *) (isz = 5) (sz = 12)
    -> EXTERN: /usr/include/bits/stdlib-float.h:(28,10) strtod(const char *, char **)
  -> EXTERN: (370,16) strcmp(const char *, const char *)
  -> EXTERN: (370,51) strcmp(const char *, const char *)
  -> EXTERN: (374,16) strcmp(const char *, const char *)
  -> EXTERN: (374,50) strcmp(const char *, const char *)
  -> EXTERN: (380,10) fprintf(FILE *, const char *, ...)
  -> INLINE: (381,10) help(const char *) (isz = 36) (sz = 41)
    -> EXTERN: (162,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (163,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (164,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (165,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (166,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (167,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (168,4) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (387,14) run_tests<double>(int, int, double) (isz = 898) (sz = 909)
    -> EXTERN: (174,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (175,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (176,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (177,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (178,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (188,4) fprintf(FILE *, const char *, ...)
    -> INLINE (MANUAL): (196,4) Allocate<double>(double *&, size_t) (isz = 48) (sz = 57)
      -> INLINE (MANUAL): ../../common/aligned_allocator.h:(59,7) Deallocate<double>(double *&) (isz = 6) (sz = 11)
        -> EXTERN: (50,7) free(void *)
      -> INLINE (MANUAL): ../../common/aligned_allocator.h:(61,10) aligned_alloc<double>(size_t) (isz = 19) (sz = 27)
        -> EXTERN: (22,15) posix_memalign(void **, size_t, size_t)
        -> EXTERN: (25,7) fprintf(FILE *, const char *, ...)
      -> EXTERN: ../../common/aligned_allocator.h:(64,7) fprintf(FILE *, const char *, ...)
      -> EXTERN: ../../common/aligned_allocator.h:(65,7) exit(int)
    -> INLINE (MANUAL): (197,4) Allocate<double>(double *&, size_t) (isz = 48) (sz = 57)
      -> INLINE (MANUAL): ../../common/aligned_allocator.h:(59,7) Deallocate<double>(double *&) (isz = 6) (sz = 11)
        -> EXTERN: (50,7) free(void *)
      -> INLINE (MANUAL): ../../common/aligned_allocator.h:(61,10) aligned_alloc<double>(size_t) (isz = 19) (sz = 27)
        -> EXTERN: (22,15) posix_memalign(void **, size_t, size_t)
        -> EXTERN: (25,7) fprintf(FILE *, const char *, ...)
      -> EXTERN: ../../common/aligned_allocator.h:(64,7) fprintf(FILE *, const char *, ...)
      -> EXTERN: ../../common/aligned_allocator.h:(65,7) exit(int)
    -> INLINE (MANUAL): (198,4) Allocate<double>(double *&, size_t) (isz = 48) (sz = 57)
      -> INLINE (MANUAL): ../../common/aligned_allocator.h:(59,7) Deallocate<double>(double *&) (isz = 6) (sz = 11)
        -> EXTERN: (50,7) free(void *)
      -> INLINE (MANUAL): ../../common/aligned_allocator.h:(61,10) aligned_alloc<double>(size_t) (isz = 19) (sz = 27)
        -> EXTERN: (22,15) posix_memalign(void **, size_t, size_t)
        -> EXTERN: (25,7) fprintf(FILE *, const char *, ...)
      -> EXTERN: ../../common/aligned_allocator.h:(64,7) fprintf(FILE *, const char *, ...)
      -> EXTERN: ../../common/aligned_allocator.h:(65,7) exit(int)
    -> INLINE (MANUAL): (199,4) Allocate<double>(double *&, size_t) (isz = 48) (sz = 57)
      -> INLINE (MANUAL): ../../common/aligned_allocator.h:(59,7) Deallocate<double>(double *&) (isz = 6) (sz = 11)
        -> EXTERN: (50,7) free(void *)
      -> INLINE (MANUAL): ../../common/aligned_allocator.h:(61,10) aligned_alloc<double>(size_t) (isz = 19) (sz = 27)
        -> EXTERN: (22,15) posix_memalign(void **, size_t, size_t)
        -> EXTERN: (25,7) fprintf(FILE *, const char *, ...)
      -> EXTERN: ../../common/aligned_allocator.h:(64,7) fprintf(FILE *, const char *, ...)
      -> EXTERN: ../../common/aligned_allocator.h:(65,7) exit(int)
    -> EXTERN: (220,7) srand(unsigned int)
    -> INLINE (MANUAL): (235,33) frand<double>() (isz = 3) (sz = 8)
      -> EXTERN: (56,43) rand()
    -> INLINE (MANUAL): (243,20) frand<double>() (isz = 3) (sz = 8)
      -> EXTERN: (56,43) rand()
    -> EXTERN: (252,24) getTimeStamp()
    -> EXTERN: (259,22) getTimeStamp()
    -> INLINE (MANUAL): (261,7) accel_register<double>(double *, double *, double *, double *, int) (isz = 95) (sz = 108)
    -> EXTERN: (263,22) getTimeStamp()
    -> INLINE (MANUAL): (266,7) update<double>(double *, double *, double *, double *, int, double) (isz = 64) (sz = 79)
    -> EXTERN: (268,22) getTimeStamp()
    -> INLINE (MANUAL): (272,10) search<double>(double *, double *, double *, double *, int) (isz = 73) (sz = 86)
      -> INLINE (MANUAL): (151,14) std::max<double>(const double &, const double &) (isz = 2) (sz = 12)
      -> INLINE (MANUAL): (152,14) std::min<double>(const double &, const double &) (isz = 2) (sz = 12)
      -> EXTERN: (155,4) printf(const char *, ...)
    -> EXTERN: (274,22) getTimeStamp()
    -> EXTERN: (276,18) getElapsedTime(myTimer_t, myTimer_t)
    -> EXTERN: (277,19) getElapsedTime(myTimer_t, myTimer_t)
    -> EXTERN: (278,19) getElapsedTime(myTimer_t, myTimer_t)
    -> EXTERN: (286,16) fprintf(FILE *, const char *, ...)
    -> EXTERN: (287,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (289,10) fprintf(FILE *, const char *, ...)
    -> EXTERN: (293,20) getElapsedTime(myTimer_t, myTimer_t)
    -> EXTERN: (293,45) getTimeStamp()
    -> EXTERN: (296,4) printf(const char *, ...)
    -> EXTERN: (306,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (308,13) fprintf(FILE *, const char *, ...)
    -> EXTERN: (309,10) fprintf(FILE *, const char *, ...)
    -> INLINE (MANUAL): (313,4) Deallocate<double>(double *&) (isz = 6) (sz = 11)
      -> EXTERN: ../../common/aligned_allocator.h:(50,7) free(void *)
    -> INLINE (MANUAL): (314,4) Deallocate<double>(double *&) (isz = 6) (sz = 11)
      -> EXTERN: ../../common/aligned_allocator.h:(50,7) free(void *)
    -> INLINE (MANUAL): (315,4) Deallocate<double>(double *&) (isz = 6) (sz = 11)
      -> EXTERN: ../../common/aligned_allocator.h:(50,7) free(void *)
    -> INLINE (MANUAL): (316,4) Deallocate<double>(double *&) (isz = 6) (sz = 11)
      -> EXTERN: ../../common/aligned_allocator.h:(50,7) free(void *)
  -> (389,14) run_tests<float>(int, int, float) (isz = 914) (sz = 925)
     [[ Inlining would exceed -inline-max-total-size value (2100>2000) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody3.cpp(335,4)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at nbody3.cpp(222,7) inlined into nbody3.cpp(387,14)
   remark #25236: Loop with pragma of trip count = 100 ignored for large value
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ nbody3.cpp(56,43) ]
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ nbody3.cpp(56,43) ]
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ nbody3.cpp(56,43) ]
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ nbody3.cpp(56,43) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand() (56:43) and call:rand() (56:43)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand() (56:43) and call:rand() (56:43)

   LOOP BEGIN at nbody3.cpp(234,21) inlined into nbody3.cpp(387,14)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at nbody3.cpp(238,10) inlined into nbody3.cpp(387,14)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at nbody3.cpp(245,10) inlined into nbody3.cpp(387,14)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at nbody3.cpp(256,4) inlined into nbody3.cpp(387,14)
   remark #25236: Loop with pragma of trip count = 100 ignored for large value
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody3.cpp(69,4) inlined into nbody3.cpp(387,14)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #25236: Loop with pragma of trip count = 100 ignored for large value
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody3.cpp(75,7) inlined into nbody3.cpp(387,14)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at nbody3.cpp(75,7) inlined into nbody3.cpp(387,14)
         remark #15389: vectorization support: reference pos[j] has unaligned access   [ nbody3.cpp(78,25) ]
         remark #15389: vectorization support: reference pos[j+n] has unaligned access   [ nbody3.cpp(79,25) ]
         remark #15389: vectorization support: reference pos[j+n*2] has unaligned access   [ nbody3.cpp(80,25) ]
         remark #15389: vectorization support: reference mass[j] has unaligned access   [ nbody3.cpp(82,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.896
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 99 
         remark #15477: vector cost: 26.500 
         remark #15478: estimated potential speedup: 3.560 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody3.cpp(75,7) inlined into nbody3.cpp(387,14)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at nbody3.cpp(103,4) inlined into nbody3.cpp(387,14)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [106 -> (Output) 107]
      remark #25447: Dependence found between following statements:  [106 -> (Flow) 107]
      remark #25447: Dependence found between following statements:  [106 -> (Anti) 107]
      remark #25447: Dependence found between following statements:  [106 -> (Flow) 106]
      remark #25447: Dependence found between following statements:  [106 -> (Anti) 106]
      remark #25447: Dependence found between following statements:  [107 -> (Flow) 107]
      remark #25447: Dependence found between following statements:  [107 -> (Anti) 107]
      remark #25447: Dependence found between following statements:  [107 -> (Output) 106]
      remark #25447: Dependence found between following statements:  [107 -> (Anti) 106]
      remark #25447: Dependence found between following statements:  [107 -> (Flow) 106]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #25236: Loop with pragma of trip count = 100 ignored for large value
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between pos[i+k*n] (106:10) and vel[i+k*n] (107:10)
      remark #15346: vector dependence: assumed OUTPUT dependence between vel[i+k*n] (107:10) and pos[i+k*n] (106:10)

      LOOP BEGIN at nbody3.cpp(104,7) inlined into nbody3.cpp(387,14)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between pos[i+k*n] (106:10) and vel[i+k*n] (107:10)
         remark #15346: vector dependence: assumed OUTPUT dependence between vel[i+k*n] (107:10) and pos[i+k*n] (106:10)
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END

   LOOP BEGIN at nbody3.cpp(145,4) inlined into nbody3.cpp(387,14)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #25236: Loop with pragma of trip count = 100 ignored for large value
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,19) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,36) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,19) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,36) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,19) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,36) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 87 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 4.400 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at nbody3.cpp(148,7) inlined into nbody3.cpp(387,14)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at nbody3.cpp(145,4) inlined into nbody3.cpp(387,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at nbody3.cpp(303,7) inlined into nbody3.cpp(387,14)
   remark #25236: Loop with pragma of trip count = 100 ignored for large value
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(306,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(306,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(306,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(308,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(308,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(308,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(309,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (306:13) and call:fprintf(FILE *, const char *, ...) (309:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (309:10) and call:fprintf(FILE *, const char *, ...) (306:13)

   LOOP BEGIN at nbody3.cpp(305,10) inlined into nbody3.cpp(387,14)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at nbody3.cpp(307,10) inlined into nbody3.cpp(387,14)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody3.cpp(322,1):remark #34051: REGISTER ALLOCATION : [main] nbody3.cpp:322

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     934
            Global    :     183
            Local     :     751
        Regenerable   :     297
        Spilled       :      38
        
    Routine stack
        Variables     :     116 bytes*
            Reads     :      20 [8.55e+00 ~ 0.7%]
            Writes    :      12 [6.22e+00 ~ 0.5%]
        Spills        :     264 bytes*
            Reads     :      80 [3.00e+01 ~ 2.4%]
            Writes    :      50 [1.08e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: run_tests<float>(int, int, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (run_tests<float>(int, int, float)) [2/26=7.7%] nbody3.cpp(173,1)
  -> EXTERN: (174,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (175,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (176,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (177,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (178,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (188,4) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (196,4) Allocate<float>(float *&, size_t) (isz = 48) (sz = 57)
    -> INLINE (MANUAL): ../../common/aligned_allocator.h:(59,7) Deallocate<float>(float *&) (isz = 6) (sz = 11)
      -> EXTERN: (50,7) free(void *)
    -> INLINE (MANUAL): ../../common/aligned_allocator.h:(61,10) aligned_alloc<float>(size_t) (isz = 19) (sz = 27)
      -> EXTERN: (22,15) posix_memalign(void **, size_t, size_t)
      -> EXTERN: (25,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: ../../common/aligned_allocator.h:(64,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: ../../common/aligned_allocator.h:(65,7) exit(int)
  -> INLINE (MANUAL): (197,4) Allocate<float>(float *&, size_t) (isz = 48) (sz = 57)
    -> INLINE (MANUAL): ../../common/aligned_allocator.h:(59,7) Deallocate<float>(float *&) (isz = 6) (sz = 11)
      -> EXTERN: (50,7) free(void *)
    -> INLINE (MANUAL): ../../common/aligned_allocator.h:(61,10) aligned_alloc<float>(size_t) (isz = 19) (sz = 27)
      -> EXTERN: (22,15) posix_memalign(void **, size_t, size_t)
      -> EXTERN: (25,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: ../../common/aligned_allocator.h:(64,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: ../../common/aligned_allocator.h:(65,7) exit(int)
  -> INLINE (MANUAL): (198,4) Allocate<float>(float *&, size_t) (isz = 48) (sz = 57)
    -> INLINE (MANUAL): ../../common/aligned_allocator.h:(59,7) Deallocate<float>(float *&) (isz = 6) (sz = 11)
      -> EXTERN: (50,7) free(void *)
    -> INLINE (MANUAL): ../../common/aligned_allocator.h:(61,10) aligned_alloc<float>(size_t) (isz = 19) (sz = 27)
      -> EXTERN: (22,15) posix_memalign(void **, size_t, size_t)
      -> EXTERN: (25,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: ../../common/aligned_allocator.h:(64,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: ../../common/aligned_allocator.h:(65,7) exit(int)
  -> INLINE (MANUAL): (199,4) Allocate<float>(float *&, size_t) (isz = 48) (sz = 57)
    -> INLINE (MANUAL): ../../common/aligned_allocator.h:(59,7) Deallocate<float>(float *&) (isz = 6) (sz = 11)
      -> EXTERN: (50,7) free(void *)
    -> INLINE (MANUAL): ../../common/aligned_allocator.h:(61,10) aligned_alloc<float>(size_t) (isz = 19) (sz = 27)
      -> EXTERN: (22,15) posix_memalign(void **, size_t, size_t)
      -> EXTERN: (25,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: ../../common/aligned_allocator.h:(64,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: ../../common/aligned_allocator.h:(65,7) exit(int)
  -> INLINE (MANUAL): (210,22) std::sqrt(float) (isz = 0) (sz = 7)
  -> EXTERN: (220,7) srand(unsigned int)
  -> INLINE (MANUAL): (235,33) frand<float>() (isz = 3) (sz = 8)
    -> EXTERN: (56,43) rand()
  -> INLINE (MANUAL): (243,20) frand<float>() (isz = 3) (sz = 8)
    -> EXTERN: (56,43) rand()
  -> EXTERN: (252,24) getTimeStamp()
  -> EXTERN: (259,22) getTimeStamp()
  -> INLINE (MANUAL): (261,7) accel_register<float>(float *, float *, float *, float *, int) (isz = 96) (sz = 109)
    -> INLINE (MANUAL): (82,47) std::sqrt(float) (isz = 0) (sz = 7)
  -> EXTERN: (263,22) getTimeStamp()
  -> INLINE (MANUAL): (266,7) update<float>(float *, float *, float *, float *, int, float) (isz = 64) (sz = 79)
  -> EXTERN: (268,22) getTimeStamp()
  -> INLINE (MANUAL): (272,10) search<float>(float *, float *, float *, float *, int) (isz = 79) (sz = 92)
    -> INLINE (MANUAL): (151,14) std::max<float>(const float &, const float &) (isz = 2) (sz = 12)
    -> INLINE (MANUAL): (152,14) std::min<float>(const float &, const float &) (isz = 2) (sz = 12)
    -> EXTERN: (155,4) printf(const char *, ...)
  -> EXTERN: (274,22) getTimeStamp()
  -> EXTERN: (276,18) getElapsedTime(myTimer_t, myTimer_t)
  -> EXTERN: (277,19) getElapsedTime(myTimer_t, myTimer_t)
  -> EXTERN: (278,19) getElapsedTime(myTimer_t, myTimer_t)
  -> EXTERN: (286,16) fprintf(FILE *, const char *, ...)
  -> EXTERN: (287,13) fprintf(FILE *, const char *, ...)
  -> EXTERN: (289,10) fprintf(FILE *, const char *, ...)
  -> EXTERN: (293,20) getElapsedTime(myTimer_t, myTimer_t)
  -> EXTERN: (293,45) getTimeStamp()
  -> EXTERN: (296,4) printf(const char *, ...)
  -> EXTERN: (306,13) fprintf(FILE *, const char *, ...)
  -> EXTERN: (308,13) fprintf(FILE *, const char *, ...)
  -> EXTERN: (309,10) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (313,4) Deallocate<float>(float *&) (isz = 6) (sz = 11)
    -> EXTERN: ../../common/aligned_allocator.h:(50,7) free(void *)
  -> INLINE (MANUAL): (314,4) Deallocate<float>(float *&) (isz = 6) (sz = 11)
    -> EXTERN: ../../common/aligned_allocator.h:(50,7) free(void *)
  -> INLINE (MANUAL): (315,4) Deallocate<float>(float *&) (isz = 6) (sz = 11)
    -> EXTERN: ../../common/aligned_allocator.h:(50,7) free(void *)
  -> INLINE (MANUAL): (316,4) Deallocate<float>(float *&) (isz = 6) (sz = 11)
    -> EXTERN: ../../common/aligned_allocator.h:(50,7) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody3.cpp(222,7)
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ nbody3.cpp(56,43) ]
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ nbody3.cpp(56,43) ]
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ nbody3.cpp(56,43) ]
   remark #15382: vectorization support: call to function rand() cannot be vectorized   [ nbody3.cpp(56,43) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand() (56:43) and call:rand() (56:43)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand() (56:43) and call:rand() (56:43)

   LOOP BEGIN at nbody3.cpp(234,21)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at nbody3.cpp(238,10)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at nbody3.cpp(245,10)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at nbody3.cpp(256,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody3.cpp(69,4) inlined into nbody3.cpp(261,7)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody3.cpp(75,7) inlined into nbody3.cpp(261,7)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at nbody3.cpp(75,7) inlined into nbody3.cpp(261,7)
         remark #15389: vectorization support: reference pos[j] has unaligned access   [ nbody3.cpp(78,25) ]
         remark #15389: vectorization support: reference pos[j+n] has unaligned access   [ nbody3.cpp(79,25) ]
         remark #15389: vectorization support: reference pos[j+n*2] has unaligned access   [ nbody3.cpp(80,25) ]
         remark #15389: vectorization support: reference mass[j] has unaligned access   [ nbody3.cpp(82,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.066
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 99 
         remark #15477: vector cost: 13.250 
         remark #15478: estimated potential speedup: 5.800 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody3.cpp(75,7) inlined into nbody3.cpp(261,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at nbody3.cpp(103,4) inlined into nbody3.cpp(266,7)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [106 -> (Output) 107]
      remark #25447: Dependence found between following statements:  [106 -> (Flow) 107]
      remark #25447: Dependence found between following statements:  [106 -> (Anti) 107]
      remark #25447: Dependence found between following statements:  [106 -> (Flow) 106]
      remark #25447: Dependence found between following statements:  [106 -> (Anti) 106]
      remark #25447: Dependence found between following statements:  [107 -> (Flow) 107]
      remark #25447: Dependence found between following statements:  [107 -> (Anti) 107]
      remark #25447: Dependence found between following statements:  [107 -> (Output) 106]
      remark #25447: Dependence found between following statements:  [107 -> (Anti) 106]
      remark #25447: Dependence found between following statements:  [107 -> (Flow) 106]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between pos[i+k*n] (106:10) and vel[i+k*n] (107:10)
      remark #15346: vector dependence: assumed OUTPUT dependence between vel[i+k*n] (107:10) and pos[i+k*n] (106:10)

      LOOP BEGIN at nbody3.cpp(104,7) inlined into nbody3.cpp(266,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between pos[i+k*n] (106:10) and vel[i+k*n] (107:10)
         remark #15346: vector dependence: assumed OUTPUT dependence between vel[i+k*n] (107:10) and pos[i+k*n] (106:10)
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END

   LOOP BEGIN at nbody3.cpp(145,4) inlined into nbody3.cpp(272,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at nbody3.cpp(145,4) inlined into nbody3.cpp(272,10)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,19) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,36) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,19) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,36) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,19) ]
      remark #15389: vectorization support: reference vel[i+k*n] has unaligned access   [ nbody3.cpp(149,36) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.347
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 87 
      remark #15477: vector cost: 9.370 
      remark #15478: estimated potential speedup: 6.780 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at nbody3.cpp(148,7) inlined into nbody3.cpp(272,10)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at nbody3.cpp(145,4) inlined into nbody3.cpp(272,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at nbody3.cpp(303,7)
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(306,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(306,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(306,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(308,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(308,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(308,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody3.cpp(309,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (306:13) and call:fprintf(FILE *, const char *, ...) (309:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (309:10) and call:fprintf(FILE *, const char *, ...) (306:13)

   LOOP BEGIN at nbody3.cpp(305,10)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at nbody3.cpp(307,10)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody3.cpp(173,1):remark #34051: REGISTER ALLOCATION : [_Z9run_testsIfEiiiT_] nbody3.cpp:173

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     608
            Global    :     153
            Local     :     455
        Regenerable   :     115
        Spilled       :      40
        
    Routine stack
        Variables     :     112 bytes*
            Reads     :      18 [6.51e+01 ~ 0.5%]
            Writes    :      16 [4.29e+01 ~ 0.3%]
        Spills        :     280 bytes*
            Reads     :      81 [3.11e+02 ~ 2.4%]
            Writes    :      43 [8.49e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: help(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (help(const char *)) [6/26=23.1%] nbody3.cpp(161,1)
  -> EXTERN: (162,13) fprintf(FILE *, const char *, ...)
  -> EXTERN: (163,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (164,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (165,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (166,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (167,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (168,4) fprintf(FILE *, const char *, ...)


    Report from: Code generation optimizations [cg]

nbody3.cpp(161,1):remark #34051: REGISTER ALLOCATION : [_Z4helpPKc] nbody3.cpp:161

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      38
            Global    :       7
            Local     :      31
        Regenerable   :      15
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: run_tests<double>(int, int, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (run_tests<double>(int, int, double)) nbody3.cpp(173,1)

===========================================================================

Begin optimization report for: Allocate<double>(double *&, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Allocate<double>(double *&, size_t)) ../../common/aligned_allocator.h(57,1)

===========================================================================

Begin optimization report for: Deallocate<double>(double *&)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Deallocate<double>(double *&)) ../../common/aligned_allocator.h(47,1)

===========================================================================

Begin optimization report for: aligned_alloc<double>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (aligned_alloc<double>(size_t)) ../../common/aligned_allocator.h(18,1)

===========================================================================

Begin optimization report for: frand<double>()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (frand<double>()) nbody3.cpp(56,23)

===========================================================================

Begin optimization report for: accel_register<double>(double *, double *, double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (accel_register<double>(double *, double *, double *, double *, int)) nbody3.cpp(65,1)

===========================================================================

Begin optimization report for: update<double>(double *, double *, double *, double *, int, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (update<double>(double *, double *, double *, double *, int, double)) nbody3.cpp(99,1)

===========================================================================

Begin optimization report for: search<double>(double *, double *, double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (search<double>(double *, double *, double *, double *, int)) nbody3.cpp(140,1)

===========================================================================

Begin optimization report for: Allocate<float>(float *&, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Allocate<float>(float *&, size_t)) ../../common/aligned_allocator.h(57,1)

===========================================================================

Begin optimization report for: Deallocate<float>(float *&)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Deallocate<float>(float *&)) ../../common/aligned_allocator.h(47,1)

===========================================================================

Begin optimization report for: aligned_alloc<float>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (aligned_alloc<float>(size_t)) ../../common/aligned_allocator.h(18,1)

===========================================================================

Begin optimization report for: frand<float>()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (frand<float>()) nbody3.cpp(56,23)

===========================================================================

Begin optimization report for: accel_register<float>(float *, float *, float *, float *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (accel_register<float>(float *, float *, float *, float *, int)) nbody3.cpp(65,1)

===========================================================================

Begin optimization report for: update<float>(float *, float *, float *, float *, int, float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (update<float>(float *, float *, float *, float *, int, float)) nbody3.cpp(99,1)

===========================================================================

Begin optimization report for: search<float>(float *, float *, float *, float *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (search<float>(float *, float *, float *, float *, int)) nbody3.cpp(140,1)

===========================================================================

Begin optimization report for: std::sqrt(float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::sqrt(float)) /opt/apps/gcc/5.4.0/include/c++/5.4.0/cmath(483,3)

===========================================================================

Begin optimization report for: std::max<double>(const double &, const double &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::max<double>(const double &, const double &)) /opt/apps/gcc/5.4.0/include/c++/5.4.0/bits/stl_algobase.h(220,5)

===========================================================================

Begin optimization report for: std::min<double>(const double &, const double &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::min<double>(const double &, const double &)) /opt/apps/gcc/5.4.0/include/c++/5.4.0/bits/stl_algobase.h(196,5)

===========================================================================

Begin optimization report for: std::max<float>(const float &, const float &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::max<float>(const float &, const float &)) /opt/apps/gcc/5.4.0/include/c++/5.4.0/bits/stl_algobase.h(220,5)

===========================================================================

Begin optimization report for: std::min<float>(const float &, const float &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::min<float>(const float &, const float &)) /opt/apps/gcc/5.4.0/include/c++/5.4.0/bits/stl_algobase.h(196,5)

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining this function at this call site would increase the size of the 
    caller more than is currently acceptable. Use the option 
    -inline-max-total-size to increase the size that all functions can 
    grow through inlining, add "#pragma optimization_parameter 
    inline_max_total_size" to the caller, add "inline 
    __attribute__((always_inline))" to the declaration of the called 
    function, or add "#pragma forceinline" before the call site.

