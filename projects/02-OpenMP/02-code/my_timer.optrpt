Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.0.104 Build 20170811

Compiler options: -I. -I../../common -O3 -fopenmp -std=c++11 -xHost -qopt-report=5 -Wunknown-pragmas -c -o my_timer.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: __invoke_rdtsc()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__invoke_rdtsc()) ../../common/my_timer.cpp(11,1)

===========================================================================

Begin optimization report for: getClockTicks()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (getClockTicks()) [2/5=40.0%] ../../common/my_timer.cpp(39,1)
  -> INLINE (MANUAL): (40,11) __invoke_rdtsc() (isz = 4) (sz = 9)


    Report from: Code generation optimizations [cg]

../../common/my_timer.cpp(39,1):remark #34051: REGISTER ALLOCATION : [_getClockTicks] ../../common/my_timer.cpp:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdx]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: getTimeStamp()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (getTimeStamp()) [3/5=60.0%] ../../common/my_timer.cpp(44,1)
  -> EXTERN: (46,4) clock_gettime(clockid_t, timespec *)


    Report from: Code generation optimizations [cg]

../../common/my_timer.cpp(44,1):remark #34051: REGISTER ALLOCATION : [_getTimeStamp] ../../common/my_timer.cpp:44

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       6
            Local     :       7
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 12.5%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: getElapsedTime(myTimer_t, myTimer_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (getElapsedTime(myTimer_t, myTimer_t)) [4/5=80.0%] ../../common/my_timer.cpp(50,1)


    Report from: Code generation optimizations [cg]

../../common/my_timer.cpp(50,1):remark #34051: REGISTER ALLOCATION : [_getElapsedTime] ../../common/my_timer.cpp:50

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rdx rcx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      20
            Global    :       0
            Local     :      20
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: getTicksPerSecond()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (getTicksPerSecond()) [5/5=100.0%] ../../common/my_timer.cpp(73,1)
  -> INLINE: (74,26) getClockTicks() (isz = 5) (sz = 10)
    -> INLINE (MANUAL): (40,11) __invoke_rdtsc() (isz = 4) (sz = 9)
  -> EXTERN: (77,44) rand()
  -> INLINE: (79,25) getClockTicks() (isz = 5) (sz = 10)
    -> INLINE (MANUAL): (40,11) __invoke_rdtsc() (isz = 4) (sz = 9)
  -> INLINE: (84,27) getTimeStamp() (isz = 4) (sz = 9)
    -> EXTERN: (46,4) clock_gettime(clockid_t, timespec *)
  -> EXTERN: (86,44) rand()
  -> INLINE: (88,26) getTimeStamp() (isz = 4) (sz = 9)
    -> EXTERN: (46,4) clock_gettime(clockid_t, timespec *)
  -> INLINE: (90,23) getElapsedTime(myTimer_t, myTimer_t) (isz = 6) (sz = 14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../common/my_timer.cpp(77,4)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ ../../common/my_timer.cpp(77,44) ]
LOOP END

LOOP BEGIN at ../../common/my_timer.cpp(86,4)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ ../../common/my_timer.cpp(86,44) ]
LOOP END

    Report from: Code generation optimizations [cg]

../../common/my_timer.cpp(73,1):remark #34051: REGISTER ALLOCATION : [_getTicksPerSecond] ../../common/my_timer.cpp:73

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rbx rbp rsi rdi r12 r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :      50
            Global    :      15
            Local     :      35
        Regenerable   :       9
        Spilled       :       4
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [1.68e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [4.20e-01 ~ 0.0%]
            Writes    :       1 [4.18e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
